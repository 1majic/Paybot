import datetime
import logging
import random
from typing import Union
import traceback as tb
from db.init import db
from keyboards import markups

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from pyqiwip2p import QiwiP2P

import config as cfg

logging.basicConfig(level=logging.INFO)
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
throttled_rate = 1

wallets = {}


p2ps = []
for number, token in wallets.items():
# p2p = QiwiP2P(auth_key=cfg.QIWI_TOKEN)
    p2p = QiwiP2P(auth_key=token)
    p2ps.append([number, p2p])


async def anti_flood(*args, **kwargs):
    pass


@dp.message_handler()
@dp.throttled(anti_flood, rate=throttled_rate)
async def make_bill(message: types.Message):
    try:
        message_money = message.text
        if not str(message_money).isdigit():
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
            return
        user_id = message.from_user.id

        lifetime = 60
        payment_id = db.get_last_payment_id() + 1
        comment = f"{str(user_id)}_{payment_id}"
        x = random.randint(0, len(p2ps) - 1)
        p2p = p2ps[x][1]
        print(p2ps[x][0])

        bill = p2p.bill(amount=message_money, lifetime=lifetime, comment=comment)

        db.add_payment(user_id, bill.bill_id, message_money)
        keyboard = markups.payment_keyboard(url=bill.pay_url, bill_id=bill.bill_id, wallet_num=x)

        current_time = datetime.datetime.now()
        deadline_time = current_time + datetime.timedelta(hours=1)

        string = (f'‚ûñ‚ûñ‚ûñ‚ûñ # {payment_id}‚ûñ‚ûñ‚ûñ‚ûñ\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: {user_id}\n'
                  f'üí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {message_money}\n'
                  f'üí≠ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n'
                  f' –í–ê–ñ–ù–û –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä—É—á–Ω—É—é.\n'
                  f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                  f'‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {lifetime} –º–∏–Ω—É—Ç\n'
                  f'üïú –í–∞—à–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è {deadline_time.strftime("%H:%M:%S")} –ú–°–ö\n '
                  f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ')
        print()
        try:
            await message.message.edit_text(string, reply_markup=keyboard)
        except Exception:
            await bot.send_message(message.from_user.id, string, reply_markup=keyboard)
    except Exception as e:
        # error = tb.TracebackException(exc_type=type(e), exc_traceback=e.__traceback__, exc_value=e).stack[-1]
        await bot.send_message(416702541, f'–û—à–∏–±–∫–∞: *{e}*\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} {message.from_user.id}\n\n'
                                          f'{tb.format_exc()}')


@dp.callback_query_handler(text_contains='check_top_up_')
async def check_top_up(callback: types.CallbackQuery):
    # ids = callback_data.get('id')
    bill_id = str(callback.data[14:])
    item = db.get_payment(bill_id)[0]
    user_id = item[1]
    money = int(item[3])
    status = item[4]
    x = int(callback.data[0])
    p2p = p2ps[x][1]
    # purchase_datetime = item[5]
    # call_user_id = callback.message.from_user.id

    # if call_user_id == user_id:
    if status == 'UNPAID':
        # new_status = str(p2p.check(bill_id=bill_id).status)
        new_status = 'PAID'
        if new_status == 'PAID':
            number = p2ps[x][0]
            user_money = db.get_user_balance(user_id=user_id)

            db.set_payment_status(bill_id=bill_id, status='PAID')
            db.set_money(user_id=user_id, money=user_money + money)

            await callback.message.edit_text('–£—Å–ø–µ—à–Ω–æ')
            await bot.send_message(cfg.admins_id[0],
                                   f'Username: @{callback.from_user.username}\nUser_id: {callback.from_user.id}\n{callback.from_user.full_name} –ø–µ—Ä–µ–≤–µ–ª "{money}‚ÇΩ" –Ω–∞ –Ω–æ–º–µ—Ä +{number}')
            # await bot.send_message(cfg.admins_id[1],
            #                        f'Username: @{callback.from_user.username}\nUser_id: {callback.from_user.id}\n{callback.from_user.full_name} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ "{money}‚ÇΩ"\n\n–ù–∞ –Ω–æ–º–µ—Ä {number}')
        elif new_status == 'EXPIRED':
            await callback.answer('–°—á–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.')
        else:
            await callback.answer('–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω.')
    else:
        await callback.answer('–°—á–µ—Ç —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω')


@dp.callback_query_handler(text_contains='cancel_payment_')
async def get_current_state(callback: types.CallbackQuery):
    bill_id = str(callback.data[15:])
    # –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∏–≤–∏
    db.del_payment(bill_id)
    await callback.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None)


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__:
    executor.start_polling(dp, skip_updates=False, on_shutdown=shutdown)